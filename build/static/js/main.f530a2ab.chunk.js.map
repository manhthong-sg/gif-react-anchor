{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","createGifAccount","provider","getProvider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","length","addGif","onInputChange","event","value","target","connection","Connection","AnchorProvider","account","fetch","useEffect","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f530a2ab.chunk.js","sourcesContent":["import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program,AnchorProvider, web3 } from '@project-serum/anchor';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport idl from './idl.json';\nimport kp from './devnet3.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const TEST_GIFS = [\n    'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n    'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n    'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n    'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n  ]\n\n  const sendGif = async () => {\n    //handle offchain\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    \n    //handle on-chain\n    //call rpc to addGif function to add gif to onchain by baseAccount\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new AnchorProvider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n\n    return provider;\n  }\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n  // UseEffects\n  \n  useEffect(() => {\n    window.addEventListener('load', checkIfWalletIsConnected);\n\n    return () => window.removeEventListener('load', checkIfWalletIsConnected);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n\n      // Call Solana program here.\n      getGifList();\n      // Set state\n      // setGifList(program.account.baseAccount.gif_list);\n    }\n  }, [walletAddress]);\n\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Vote your GIF - Up to Earn</p>\n          <p className=\"sub-text\">\n            Upload your GIF collection in the metaverse âœ¨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}